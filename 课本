1.                package study;

                  public class data {
                      public static void main(String a[]){
                          //强制类型转换
                          int A=100;
                          long B=(long)A;
                          double C=1.000011111111222;
                          int D=(int)C;
                          float E=(float)C;
                          int F=10;
                          float G=(float)F;
                          //自动类型提升(int+double=double)
                          //byte、char、short < int < long < float < double
                          long H=A+B;
                          double I=C+D+E;
                          float J=F+G;
                          System.out.println("A--"+A);
                          System.out.println("B--"+B);
                          System.out.println("C--"+C);
                          System.out.println("D--"+D);
                          System.out.println("E--"+E);
                          System.out.println("F--"+F);
                          System.out.println("G--"+G);
                          System.out.println("H--"+H);
                          System.out.println("I--"+I);
                          System.out.println("J--"+J);
                      }
                  }




2.                package study;

                  class Student{
                      private float weight;                                 //私有变量,在后续操作中无法访问
                      private float sum(float a,float b){                   //私有方法,在后续操作中无法访问
                          return a+b;
                      }
                      public float height;                                  //共有变量,在后续操作中可以访问
                      public float sub(float a,float b){                    //共有方法,在后续操作中可以访问
                          return a-b;
                      }
                      String name;                                          //友好变量,在后续操作中可以访问
                      float bigger(float a,float b){                        //友好方法,在后续操作中可以访问
                          if(a>b){
                              return a;
                          }
                          return b;
                      }
                      protected String number;                              //受保护的变量,在后续操作中可以访问
                      protected float smaller(float a,float b){             //受保护的方法,在后续操作中可以访问
                          if(a<b){
                              return a;
                          }
                          return b;
                      }
                  }

                  class People{
                      Student people=new Student();
                      void p(){
                          float r,l,v;
                          people.height=160;
                          r=people.sub(1,2);
                          people.name="007";
                          l=people.bigger(100,200);
                          people.number="001";
                          v=people.smaller(100,200);
                          System.out.println(people.height);
                          System.out.println(r);
                          System.out.println(people.name);
                          System.out.println(l);
                          System.out.println(people.number);
                          System.out.println(v);
                      }
                  }

                  public class Class {
                      public static void main(String args[]){
                          Student Tom=new Student();
                          People Ben=new People();
                          float result;
                          /*
                          Tom.weight=100;
                          result=Tom.sum(10,20);
                          */
                          Tom.height=170;
                          result=Tom.sub(10,20);
                          System.out.println(Tom.height);
                          System.out.println(result);
                          Ben.p();
                      }
                  }



3.                package study;

                  public class Data {
                      public static void main(String a[]){
                          int A[]=new int[10];            //动态
                          int B[]=new int[]{1,2,5,67};    //静态
                          System.out.println(B.length);
                          People people=new People();
                          people.p();
                      }
                  }




4.               package study;

                  /*
                  Java中的基本类型不是面向对象的，它们只是纯粹的数据，除了数值本身的信息之外，基本类型数据不带有其他信息或者可操作方法。
                  这在实际使用中存在很多不足，为了解决这个不足，* 对每个基本类型都对应了一个引用的类型*，称为装箱基本类型。
                  */

                  public class Example1 {
                      public static void main(String args[]){
                          Integer n=new Integer(100);                 //装箱:根据需要的数据类型创建对应的包装对象
                          Double m=200d;                                    //自动装箱
                          int N=n.intValue();                               //拆箱:将包装对象转换成基本数据类型
                          double M=m;                                       //自动拆箱
                          System.out.println(N);
                          System.out.println(M);
                      }
                  }




5.                package study;

                  class Computer{
                      int GetSum(int...x){                                 //可变参数,从第一个到最后一个参数都是int型,x视为一个数组
                          int sum=0;
                          for(int i=0;i<x.length;i++){
                              sum+=x[i];
                          }
                          return sum;
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          Computer com=new Computer();
                          int result=com.GetSum(100,123,123,34,53);   //使用方式
                          System.out.println(result);
                      }
                  }
               





6.                package study;

                  class Village {
                      static int TreeNum;                        //static可以使变量能直接用类名访问
                      int PeopleNum;
                      String Name;
                      Village(String s){
                          Name=s;
                      }
                      void TreePlant(int n){
                          TreeNum+=n;
                          System.out.println(Name+"植树"+n+"棵");
                      }
                      void TreeFell(int n){
                          if(TreeNum-n>=0){
                              TreeNum-=n;
                              System.out.println(Name+"伐树"+n+"棵");
                          }
                          else{
                              System.out.println("砍伐最后的"+TreeNum+"棵树后无树可伐!");
                          }
                      }
                      static int LookTreeNum(){
                          return TreeNum;
                      }
                      static void LookTree(){
                          System.out.println("森林里有"+TreeNum+"棵树");
                      }
                      void PeopleAdd(int n){
                          PeopleNum+=n;
                          System.out.println(Name+"增加了"+n+"名村民");
                      }
                      void PeopleSub(int n){
                          PeopleNum-=n;
                          System.out.println(Name+"减少了"+n+"名村民");
                      }
                  }





7.                package study;

                  public class Example3 {
                      public static void main(String args[]){
                          Village N=new Village("张庄");
                          Village M=new Village("李庄");
                          N.PeopleNum=100;
                          M.PeopleNum=50;
                          Village.TreeNum=500;
                          int tree=Village.TreeNum;
                          Village.LookTree();
                          N.TreePlant(30);
                          Village.LookTree();
                          M.TreeFell(100);
                          Village.LookTree();
                          N.PeopleAdd(60);
                          M.PeopleSub(20);
                      }
                  }



8.                package study;

                  class Dept{
                      int ID;
                      String name,type,description;
                      Dept(){}
                      Dept(int ID,String name,String type){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                      }
                      void Getter(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                      }
                      void Setter(int ID,String name,String type,String description){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                      }
                  }

                  class OutpatientDept extends Dept{
                      String address;
                      OutpatientDept(){}
                      OutpatientDept(int ID,String name,String type,String description,String address){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                          this.address=address;
                      }
                      void ToString(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                          System.out.println(address);
                      }
                  }

                  class InpatientDept extends Dept{
                      String ward;
                      InpatientDept(){}
                      InpatientDept(int ID,String name,String type,String description,String ward){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                          this.ward=ward;
                      }
                      void ToString(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                          System.out.println(ward);
                      }
                  }

                  class Hospital{
                      OutpatientDept[] A=new OutpatientDept[20];
                      InpatientDept[] B=new InpatientDept[20];
                      int k1=0,k2=0;
                      void addDept(int ID,String name,String type,String description,String choose){
                          if(type=="门诊部"){
                              A[k1]=new OutpatientDept(ID,name,type,description,choose);
                              k1++;
                          }
                          else{
                              B[k2]=new InpatientDept(ID,name,type,description,choose);
                              k2++;
                          }
                      }
                      void delDept(int ID,String type){
                          if(type=="门诊部"){
                              for(int i=0;i<k1;i++){
                                  if(A[i].ID==ID){
                                      for(int j=i+1;j<k1;j++){
                                          A[j-1]=A[j];
                                      }
                                      k1--;
                                      System.out.println("已删除门诊部"+ID+"号!");
                                      return;
                                  }
                              }
                              System.out.println("未在门诊部找到要删除的ID!");
                          }
                          else{
                              for(int i=0;i<k2;i++){
                                  if(B[i].ID==ID){
                                      for(int j=i+1;j<k2;j++){
                                          B[j-1]=B[j];
                                      }
                                      k2--;
                                      System.out.println("已删除住院部"+ID+"号!");
                                      return;
                                  }
                              }
                              System.out.println("未在住院部找到要删除的ID!");
                          }
                      }
                      void showDept(){
                          for(int i=0;i<k1;i++){
                              System.out.println("门诊部"+(i+1)+"号病人信息:");
                              A[i].ToString();
                              System.out.println();
                          }
                          for(int i=0;i<k2;i++){
                              System.out.println("住院部"+(i+1)+"号病人信息:");
                              B[i].ToString();
                              System.out.println();
                          }
                      }
                  }

                  public class Example {
                      public static void main(String args[]){
                          Hospital hos=new Hospital();
                          hos.addDept(2012,"小李","门诊部","感冒","门诊部一楼");
                          hos.addDept(2004,"小刘","门诊部","发烧","门诊部一楼");
                          hos.addDept(2025,"小黄","门诊部","呕吐","门诊部二楼");
                          hos.addDept(2002,"小王","住院部","头疼","中区");
                          hos.addDept(2037,"小季","住院部","摔伤","西区");
                          hos.addDept(2053,"小张","住院部","骨折","东区");
                          hos.showDept();
                          hos.delDept(2012,"门诊部");
                          System.out.println("删除后结果如下\n");
                          hos.showDept();
                      }
                  }




9.                package study;

                  class University{
                      void enterRule(double Math,double English,double Chinese){
                          double total=Math+English+Chinese;
                          if(total>=250){
                              System.out.println(total+":分数到达大学录取线");
                          }
                          else{
                              System.out.println(total+":分数未到达大学录取线");
                          }
                      }
                  }

                  class ImportantUniversity extends University{
                      void enterRule(double Math,double English,double Chinese){          //方法重写,原方法(父类的方法)被隐藏
                          double total=Math+English+Chinese;
                          if(total>=350){
                              System.out.println(total+":分数到达重点大学录取线");
                          }
                          else{
                              System.out.println(total+":分数未到达重点大学录取线");
                          }
                      }
                  }

                  public class Example1 {
                      public static void main(String args[]){
                          double M=110,E=130,C=110;
                          University student1=new University();
                          ImportantUniversity student2=new ImportantUniversity();
                          student1.enterRule(M,E,C);
                          student2.enterRule(M,E,C);           //调用重写后的方法
                      }
                  }

10.               package study;                               //JAVA类名和包名不区分大小写,class A和class a是一样的,会随机解析其中的一个

                  class per{
                      float weight,height;
                      String name,ID;
                      void speak(String s){
                          System.out.println(s);
                      }
                  }

                  class classmate extends per{
                      double add(double a,double b){
                          return a+b;
                      }
                  }

                  public class Example4 {
                      public static void main(String args[]){
                          classmate Tom=new classmate();
                          Tom.height=180;
                          Tom.weight=60;
                          Tom.name="汤姆";
                          Tom.ID="007";
                          Tom.speak("我是"+Tom.name+",我的身高是"+ Tom.height+"cm,我的体重是"+Tom.weight+"kg,代号"+Tom.ID+",很高兴认识你!");
                          System.out.println(Tom.add(100,200));
                      }
                  }




11.               package study;

                  class A{
                      float s(float x,float y){
                          return x+y;
                      }
                      public int g(int x,int y){
                          return x+y;
                      }
                  }

                  class B extends A{
                      float s(float x,float y){            //子类方法重写,但不能改变s的类型
                          return x*y;                      // ---double s(float x,float y),则此时B中有两个同名s函数
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          B b=new B();
                          System.out.println("方法重写:"+b.s(11,23));
                          System.out.println("方法继承:"+b.g(11,23));
                      }
                  }





12.               package study;

                  class Bank{
                      int saveMoney;
                      int year;
                      double interest;
                      public double Interest(){
                          interest=year*0.035*saveMoney;
                          //System.out.printf("%d元存在银行%d年的利息是:%f元\n",saveMoney,year,interest);
                          return interest;
                      }
                  }

                  class FirstBank extends Bank{
                      double year;                                 //隐藏了继承的year,通过调用super关键字使用被隐藏的year
                      public double Interest(){                    //子类方法重写,原Interest被隐藏
                          super.year=(int)year;                    //强制转换,得到整年
                          double littleYear=year-super.year;            //得到小数部分的年
                          int day=(int)(littleYear*365);
                          interest=super.Interest()+day*0.0001*saveMoney;
                          System.out.printf("%d元存在第一银行%d年零%d天的利息是:%f元\n",saveMoney,super.year,day,interest);
                          return interest;
                      }
                  }

                  class SecondBank extends Bank{
                      double year;
                      public double Interest(){
                          super.year=(int)year;
                          double littleYear=year-super.year;
                          int day=(int)(littleYear*365);
                          interest=super.Interest()+day*0.00012*saveMoney;
                          System.out.printf("%d元存在第二银行%d年零%d天的利息是:%f元\n",saveMoney,super.year,day,interest);
                          return interest;
                      }
                  }

                  public class Example3 {
                      public static void main(String args[]){
                          int amount=200000;
                          FirstBank bank1=new FirstBank();
                          SecondBank bank2=new SecondBank();
                          bank1.saveMoney=amount;
                          bank1.year=10.23;
                          bank2.saveMoney=amount;
                          bank2.year=10.23;
                          double interest1=bank1.Interest();
                          double interest2=bank2.Interest();
                          System.out.printf("两个银行利润相差%f元\n",interest1-interest2);
                      }
                  }




13.               package study;

                  class Student{
                      int ID;
                      String name;
                      Student(){}
                      Student(int ID,String name){
                          this.name=name;
                          this.ID=ID;
                          System.out.println("我的学号是:"+ID+",姓名是:"+name);
                      }
                  }

                  class Students extends Student{
                      boolean Marry;
                      Students(int ID,String name,boolean Marry){
                          super(ID,name);
                          this.Marry=Marry;
                          System.out.println("结婚情况:"+Marry);
                      }
                  }

                  public class Example4 {
                      public static void main(String a[]){
                          Students people=new Students(2012,"小李",true);
                      }
                  }




14.               package study;

                  class Num{
                      final double PI=3.1415;                                        //final定义常量,不允许修改
                      double GetArea(final double r){
                          System.out.println("面积:"+PI*r*r);
                          return PI*r*r;
                      }
                      final void speak(){
                          System.out.println("你好?能看见我吗?");
                      }
                  }

                  class Name extends Num{                                             //final类没有子类,不允许继承
                      void speakAgain(){                                              //final方法智能被继承,不能被重写
                          System.out.println("还能看见我吧?");
                      }
                  }

                  public class Example5 {
                      public static void main(String arg[]){
                          Num A=new Num();
                          Name B=new Name();
                          //错误:A.PI=3.14;
                          A.GetArea(12);
                          B.GetArea(12);
                          A.speak();
                          B.speak();
                          B.speakAgain();
                      }
                  }






15.               package study;

                  class 类人猿{
                      void crySpeak(String s){
                          System.out.println(s);
                      }
                  }

                  class 人 extends 类人猿{
                      void count(int a,int b){
                          System.out.println(a*b);
                      }
                      void crySpeak(String s){                   //重写后的方法
                          System.out.println("***"+s+"***");
                      }
                  }

                  public class Example6 {
                      public static void main(String arg[]){
                          类人猿 A=new 人();                      //即对象"人"的上转型对象,此时A不能使用"人"中新加入的方法或变量
                          A.crySpeak("好好学习,天天向上!");     //同时会使用"人"中重写的方法,而不是父类中的原方法
                          //A.count(10,12);
                          人 B=(人)A;                             //把上转型对象强制转化为子类对象
                          B.count(10,12);
                      }
                  }





16.               package study;

                  class Animal{
                      void cry(){}
                  }

                  class Cat extends Animal{
                      void cry(){
                          System.out.println("喵喵~~");
                      }
                  }

                  class Dog extends Animal{
                      void cry(){
                          System.out.println("汪汪~~");
                      }
                  }

                  public class Example7 {                                //多态
                      public static void main(String args[]){
                          Animal cat=new Cat();
                          cat.cry();
                          Animal dog=new Dog();
                          dog.cry();
                      }
                  }





17.               package study;

                  abstract class First{
                      abstract int sum(int a,int b);                //abstract方法只有声明,没有实现
                      int sub(int a,int b){
                          return a-b;
                      }
                  }

                  class Second extends First{                       //类 "Second" 必须声明为抽象，或为实现 "First" 中的抽象方法 "sum(int, int)"
                      int sum(int a,int b){
                          return a+b;                               //重写abstract方法
                      }
                  }

                  public class Example8 {
                      public static void main(String args[]){
                          //First A=new First();                    //'First' 为 abstract；无法实例化
                          Second B=new Second();
                          System.out.println("sum="+B.sum(11,25));
                          System.out.println("sub="+B.sub(124,45));
                      }
                  }





18.               package study;

                  class Circle{
                      double r;
                      Circle(double r){
                          this.r=r;
                      }
                      double GetArea(){
                          return 3.14*r*r;
                      }
                  }

                  class Pillar{
                      Circle bottom;
                      double height;
                      Pillar(Circle bottom,double height){
                          this.bottom=bottom;
                          this.height=height;
                      }
                      double GetVolume(){
                          return bottom.GetArea()*height;
                      }
                  }

                  public class Example9 {
                      public static void main(String ars[]){
                          Circle A=new Circle(3);
                          Pillar B=new Pillar(A,10);
                          System.out.println(B.GetVolume());
                      }
                  }





19.               package study;

                  abstract class Area{
                      abstract double GetArea();               //定义抽象类和抽象方法
                  }

                  class newPillar{
                      Area bottom;
                      double height;
                      newPillar(Area bottom,double height){
                          this.bottom=bottom;
                          this.height=height;
                      }
                      double GetVolume(){
                          return bottom.GetArea()*height;     //将体积计算抽象为底面积*高,而底面积则由后续Area的子类重写方法计算
                      }
                  }

                  class newCircle extends Area{
                      double r;
                      newCircle(double r){
                          this.r=r;
                      }
                      double GetArea(){
                          return 3.14*r*r;
                      }
                  }

                  class newRectangle extends Area{
                      double a,b;
                      newRectangle(double a,double b){
                          this.a=a;
                          this.b=b;
                      }
                      double GetArea(){
                          return a*b;
                      }
                  }

                  public class Example10 {
                      public static void main(String args[]){
                          Area bottom;
                          newPillar pillar;
                          bottom=new newCircle(3);                           //上转型对象
                          pillar=new newPillar(bottom,10);
                          System.out.println("圆柱体积:"+pillar.GetVolume());
                          bottom=new newRectangle(5,7);
                          pillar=new newPillar(bottom,10);
                          System.out.println("棱柱体积:"+pillar.GetVolume());
                      }
                  }





20.               package study;

                  abstract class Area{                       //抽象面积
                      abstract double GetArea();
                  }

                  class Circle extends Area{
                      double r;
                      Circle(double r){
                          this.r=r;
                      }
                      double GetArea(){                       //具体面积1
                          return 3.14*r*r;
                      }
                  }

                  class Rectangle extends Area{
                      double a,b;
                      Rectangle(int a,int b){
                          this.a=a;
                          this.b=b;
                      }
                      double GetArea(){                        //具体面积2
                          return a*b;
                      }
                  }

                  class Sum{
                      double SumArea(Area...x){                //可变参数的使用
                          double s=0;
                          for(int i=0;i<x.length;i++){
                              s+=x[i].GetArea();
                          }
                          return s;
                      }
                  }

                  public class Example1 {
                      public static void main(String ars[]){
                          Sum sum=new Sum();
                          double area=sum.SumArea(new Circle(9),new Rectangle(4,6),new Circle(4.2));
                          System.out.println("面积和为:"+area);
                      }
                  }




21.               package study;

                  interface Computer{                         //interface定义接口
                      public int Max=10;
                      public abstract int sum(int a);         //接口中只允许有常量和抽象方法,分别用public和public abstract修饰,可省略
                  }

                  class One implements Computer{              //用implements将接口引入非抽象类中实现(抽象类则不一定实现)
                      int ID;
                      public int sum(int a){                  //记住要用public修饰
                          int s=0;
                          for(int i=1;i<=a;i++){
                              s+=i;
                          }
                          return s;
                      }
                  }

                  class Two implements Computer{
                      int ID;
                      public int sum(int a){
                          int s=1;
                          for(int i=2;i<=a;i++){
                              s=s*i;
                          }
                          return s;
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          One a=new One();
                          Two b=new Two();
                          a.ID=202012+Computer.Max;
                          b.ID=202141+Computer.Max;
                          System.out.println("小a的学号是:"+a.ID+",他的求和结果是:"+a.sum(20));
                          System.out.println("小b的学号是:"+b.ID+",他的求积结果是:"+b.sum(10));
                      }
                  }





22.               package study;

                  interface ShowMessage{
                      void Show(String S);
                  }

                  class TV implements ShowMessage{
                      public void Show(String S){
                          System.out.println(S);
                      }
                      int sum(int a,int b){
                          return a+b;
                      }
                  }

                  class PC implements ShowMessage{
                      public void Show(String S){
                          System.out.println(S);
                      }
                  }

                  public class Example3 {
                      public static void main(String ats[]){
                          ShowMessage a;                               //接口变量
                          a=new TV();                                  //接口回调
                          a.Show("喜马拉雅电视机");                   //可以使用类实现的接口方法,但不能使用类原本的方法
                          //a.sum(10,20);
                          a=new PC();
                          a.Show("MacBook");
                      }
                  }




23.               
