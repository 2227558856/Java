1.                package study;

                  public class data {
                      public static void main(String a[]){
                          //强制类型转换
                          int A=100;
                          long B=(long)A;
                          double C=1.000011111111222;
                          int D=(int)C;
                          float E=(float)C;
                          int F=10;
                          float G=(float)F;
                          //自动类型提升(int+double=double)
                          //byte、char、short < int < long < float < double
                          long H=A+B;
                          double I=C+D+E;
                          float J=F+G;
                          System.out.println("A--"+A);
                          System.out.println("B--"+B);
                          System.out.println("C--"+C);
                          System.out.println("D--"+D);
                          System.out.println("E--"+E);
                          System.out.println("F--"+F);
                          System.out.println("G--"+G);
                          System.out.println("H--"+H);
                          System.out.println("I--"+I);
                          System.out.println("J--"+J);
                      }
                  }




2.                package study;

                  class Student{
                      private float weight;                                 //私有变量,在后续操作中无法访问
                      private float sum(float a,float b){                   //私有方法,在后续操作中无法访问
                          return a+b;
                      }
                      public float height;                                  //共有变量,在后续操作中可以访问
                      public float sub(float a,float b){                    //共有方法,在后续操作中可以访问
                          return a-b;
                      }
                      String name;                                          //友好变量,在后续操作中可以访问
                      float bigger(float a,float b){                        //友好方法,在后续操作中可以访问
                          if(a>b){
                              return a;
                          }
                          return b;
                      }
                      protected String number;                              //受保护的变量,在后续操作中可以访问
                      protected float smaller(float a,float b){             //受保护的方法,在后续操作中可以访问
                          if(a<b){
                              return a;
                          }
                          return b;
                      }
                  }

                  class People{
                      Student people=new Student();
                      void p(){
                          float r,l,v;
                          people.height=160;
                          r=people.sub(1,2);
                          people.name="007";
                          l=people.bigger(100,200);
                          people.number="001";
                          v=people.smaller(100,200);
                          System.out.println(people.height);
                          System.out.println(r);
                          System.out.println(people.name);
                          System.out.println(l);
                          System.out.println(people.number);
                          System.out.println(v);
                      }
                  }

                  public class Class {
                      public static void main(String args[]){
                          Student Tom=new Student();
                          People Ben=new People();
                          float result;
                          /*
                          Tom.weight=100;
                          result=Tom.sum(10,20);
                          */
                          Tom.height=170;
                          result=Tom.sub(10,20);
                          System.out.println(Tom.height);
                          System.out.println(result);
                          Ben.p();
                      }
                  }



3.                package study;

                  public class Data {
                      public static void main(String a[]){
                          int A[]=new int[10];            //动态
                          int B[]=new int[]{1,2,5,67};    //静态
                          System.out.println(B.length);
                          People people=new People();
                          people.p();
                      }
                  }




4.               package study;

                  /*
                  Java中的基本类型不是面向对象的，它们只是纯粹的数据，除了数值本身的信息之外，基本类型数据不带有其他信息或者可操作方法。
                  这在实际使用中存在很多不足，为了解决这个不足，* 对每个基本类型都对应了一个引用的类型*，称为装箱基本类型。
                  */

                  public class Example1 {
                      public static void main(String args[]){
                          Integer n=new Integer(100);                 //装箱:根据需要的数据类型创建对应的包装对象
                          Double m=200d;                                    //自动装箱
                          int N=n.intValue();                               //拆箱:将包装对象转换成基本数据类型
                          double M=m;                                       //自动拆箱
                          System.out.println(N);
                          System.out.println(M);
                      }
                  }




5.                package study;

                  class Computer{
                      int GetSum(int...x){                                 //可变参数,从第一个到最后一个参数都是int型,x视为一个数组
                          int sum=0;
                          for(int i=0;i<x.length;i++){
                              sum+=x[i];
                          }
                          return sum;
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          Computer com=new Computer();
                          int result=com.GetSum(100,123,123,34,53);   //使用方式
                          System.out.println(result);
                      }
                  }
               





6.                package study;

                  class Village {
                      static int TreeNum;                        //static可以使变量能直接用类名访问
                      int PeopleNum;
                      String Name;
                      Village(String s){
                          Name=s;
                      }
                      void TreePlant(int n){
                          TreeNum+=n;
                          System.out.println(Name+"植树"+n+"棵");
                      }
                      void TreeFell(int n){
                          if(TreeNum-n>=0){
                              TreeNum-=n;
                              System.out.println(Name+"伐树"+n+"棵");
                          }
                          else{
                              System.out.println("砍伐最后的"+TreeNum+"棵树后无树可伐!");
                          }
                      }
                      static int LookTreeNum(){
                          return TreeNum;
                      }
                      static void LookTree(){
                          System.out.println("森林里有"+TreeNum+"棵树");
                      }
                      void PeopleAdd(int n){
                          PeopleNum+=n;
                          System.out.println(Name+"增加了"+n+"名村民");
                      }
                      void PeopleSub(int n){
                          PeopleNum-=n;
                          System.out.println(Name+"减少了"+n+"名村民");
                      }
                  }





7.                package study;

                  public class Example3 {
                      public static void main(String args[]){
                          Village N=new Village("张庄");
                          Village M=new Village("李庄");
                          N.PeopleNum=100;
                          M.PeopleNum=50;
                          Village.TreeNum=500;
                          int tree=Village.TreeNum;
                          Village.LookTree();
                          N.TreePlant(30);
                          Village.LookTree();
                          M.TreeFell(100);
                          Village.LookTree();
                          N.PeopleAdd(60);
                          M.PeopleSub(20);
                      }
                  }



8.                package study;

                  class Dept{
                      int ID;
                      String name,type,description;
                      Dept(){}
                      Dept(int ID,String name,String type){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                      }
                      void Getter(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                      }
                      void Setter(int ID,String name,String type,String description){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                      }
                  }

                  class OutpatientDept extends Dept{
                      String address;
                      OutpatientDept(){}
                      OutpatientDept(int ID,String name,String type,String description,String address){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                          this.address=address;
                      }
                      void ToString(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                          System.out.println(address);
                      }
                  }

                  class InpatientDept extends Dept{
                      String ward;
                      InpatientDept(){}
                      InpatientDept(int ID,String name,String type,String description,String ward){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                          this.ward=ward;
                      }
                      void ToString(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                          System.out.println(ward);
                      }
                  }

                  class Hospital{
                      OutpatientDept[] A=new OutpatientDept[20];
                      InpatientDept[] B=new InpatientDept[20];
                      int k1=0,k2=0;
                      void addDept(int ID,String name,String type,String description,String choose){
                          if(type=="门诊部"){
                              A[k1]=new OutpatientDept(ID,name,type,description,choose);
                              k1++;
                          }
                          else{
                              B[k2]=new InpatientDept(ID,name,type,description,choose);
                              k2++;
                          }
                      }
                      void delDept(int ID,String type){
                          if(type=="门诊部"){
                              for(int i=0;i<k1;i++){
                                  if(A[i].ID==ID){
                                      for(int j=i+1;j<k1;j++){
                                          A[j-1]=A[j];
                                      }
                                      k1--;
                                      System.out.println("已删除门诊部"+ID+"号!");
                                      return;
                                  }
                              }
                              System.out.println("未在门诊部找到要删除的ID!");
                          }
                          else{
                              for(int i=0;i<k2;i++){
                                  if(B[i].ID==ID){
                                      for(int j=i+1;j<k2;j++){
                                          B[j-1]=B[j];
                                      }
                                      k2--;
                                      System.out.println("已删除住院部"+ID+"号!");
                                      return;
                                  }
                              }
                              System.out.println("未在住院部找到要删除的ID!");
                          }
                      }
                      void showDept(){
                          for(int i=0;i<k1;i++){
                              System.out.println("门诊部"+(i+1)+"号病人信息:");
                              A[i].ToString();
                              System.out.println();
                          }
                          for(int i=0;i<k2;i++){
                              System.out.println("住院部"+(i+1)+"号病人信息:");
                              B[i].ToString();
                              System.out.println();
                          }
                      }
                  }

                  public class Example {
                      public static void main(String args[]){
                          Hospital hos=new Hospital();
                          hos.addDept(2012,"小李","门诊部","感冒","门诊部一楼");
                          hos.addDept(2004,"小刘","门诊部","发烧","门诊部一楼");
                          hos.addDept(2025,"小黄","门诊部","呕吐","门诊部二楼");
                          hos.addDept(2002,"小王","住院部","头疼","中区");
                          hos.addDept(2037,"小季","住院部","摔伤","西区");
                          hos.addDept(2053,"小张","住院部","骨折","东区");
                          hos.showDept();
                          hos.delDept(2012,"门诊部");
                          System.out.println("删除后结果如下\n");
                          hos.showDept();
                      }
                  }




9.                
