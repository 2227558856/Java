1.                package study;

                  public class data {
                      public static void main(String a[]){
                          //强制类型转换
                          int A=100;
                          long B=(long)A;
                          double C=1.000011111111222;
                          int D=(int)C;
                          float E=(float)C;
                          int F=10;
                          float G=(float)F;
                          //自动类型提升(int+double=double)
                          //byte、char、short < int < long < float < double
                          long H=A+B;
                          double I=C+D+E;
                          float J=F+G;
                          System.out.println("A--"+A);
                          System.out.println("B--"+B);
                          System.out.println("C--"+C);
                          System.out.println("D--"+D);
                          System.out.println("E--"+E);
                          System.out.println("F--"+F);
                          System.out.println("G--"+G);
                          System.out.println("H--"+H);
                          System.out.println("I--"+I);
                          System.out.println("J--"+J);
                      }
                  }




2.                package study;

                  class Student{
                      private float weight;                                 //私有变量,在后续操作中无法访问
                      private float sum(float a,float b){                   //私有方法,在后续操作中无法访问
                          return a+b;
                      }
                      public float height;                                  //共有变量,在后续操作中可以访问
                      public float sub(float a,float b){                    //共有方法,在后续操作中可以访问
                          return a-b;
                      }
                      String name;                                          //友好变量,在后续操作中可以访问
                      float bigger(float a,float b){                        //友好方法,在后续操作中可以访问
                          if(a>b){
                              return a;
                          }
                          return b;
                      }
                      protected String number;                              //受保护的变量,在后续操作中可以访问
                      protected float smaller(float a,float b){             //受保护的方法,在后续操作中可以访问
                          if(a<b){
                              return a;
                          }
                          return b;
                      }
                  }

                  class People{
                      Student people=new Student();
                      void p(){
                          float r,l,v;
                          people.height=160;
                          r=people.sub(1,2);
                          people.name="007";
                          l=people.bigger(100,200);
                          people.number="001";
                          v=people.smaller(100,200);
                          System.out.println(people.height);
                          System.out.println(r);
                          System.out.println(people.name);
                          System.out.println(l);
                          System.out.println(people.number);
                          System.out.println(v);
                      }
                  }

                  public class Class {
                      public static void main(String args[]){
                          Student Tom=new Student();
                          People Ben=new People();
                          float result;
                          /*
                          Tom.weight=100;
                          result=Tom.sum(10,20);
                          */
                          Tom.height=170;
                          result=Tom.sub(10,20);
                          System.out.println(Tom.height);
                          System.out.println(result);
                          Ben.p();
                      }
                  }



3.                package study;

                  public class Data {
                      public static void main(String a[]){
                          int A[]=new int[10];            //动态
                          int B[]=new int[]{1,2,5,67};    //静态
                          System.out.println(B.length);
                          People people=new People();
                          people.p();
                      }
                  }




4.               package study;

                  /*
                  Java中的基本类型不是面向对象的，它们只是纯粹的数据，除了数值本身的信息之外，基本类型数据不带有其他信息或者可操作方法。
                  这在实际使用中存在很多不足，为了解决这个不足，* 对每个基本类型都对应了一个引用的类型*，称为装箱基本类型。
                  */

                  public class Example1 {
                      public static void main(String args[]){
                          Integer n=new Integer(100);                 //装箱:根据需要的数据类型创建对应的包装对象
                          Double m=200d;                                    //自动装箱
                          int N=n.intValue();                               //拆箱:将包装对象转换成基本数据类型
                          double M=m;                                       //自动拆箱
                          System.out.println(N);
                          System.out.println(M);
                      }
                  }




5.                package study;

                  class Computer{
                      int GetSum(int...x){                                 //可变参数,从第一个到最后一个参数都是int型,x视为一个数组
                          int sum=0;
                          for(int i=0;i<x.length;i++){
                              sum+=x[i];
                          }
                          return sum;
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          Computer com=new Computer();
                          int result=com.GetSum(100,123,123,34,53);   //使用方式
                          System.out.println(result);
                      }
                  }
               





6.                package study;

                  class Village {
                      static int TreeNum;                        //static可以使变量能直接用类名访问
                      int PeopleNum;
                      String Name;
                      Village(String s){
                          Name=s;
                      }
                      void TreePlant(int n){
                          TreeNum+=n;
                          System.out.println(Name+"植树"+n+"棵");
                      }
                      void TreeFell(int n){
                          if(TreeNum-n>=0){
                              TreeNum-=n;
                              System.out.println(Name+"伐树"+n+"棵");
                          }
                          else{
                              System.out.println("砍伐最后的"+TreeNum+"棵树后无树可伐!");
                          }
                      }
                      static int LookTreeNum(){
                          return TreeNum;
                      }
                      static void LookTree(){
                          System.out.println("森林里有"+TreeNum+"棵树");
                      }
                      void PeopleAdd(int n){
                          PeopleNum+=n;
                          System.out.println(Name+"增加了"+n+"名村民");
                      }
                      void PeopleSub(int n){
                          PeopleNum-=n;
                          System.out.println(Name+"减少了"+n+"名村民");
                      }
                  }





7.                package study;

                  public class Example3 {
                      public static void main(String args[]){
                          Village N=new Village("张庄");
                          Village M=new Village("李庄");
                          N.PeopleNum=100;
                          M.PeopleNum=50;
                          Village.TreeNum=500;
                          int tree=Village.TreeNum;
                          Village.LookTree();
                          N.TreePlant(30);
                          Village.LookTree();
                          M.TreeFell(100);
                          Village.LookTree();
                          N.PeopleAdd(60);
                          M.PeopleSub(20);
                      }
                  }



8.                package study;

                  class Dept{
                      int ID;
                      String name,type,description;
                      Dept(){}
                      Dept(int ID,String name,String type){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                      }
                      void Getter(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                      }
                      void Setter(int ID,String name,String type,String description){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                      }
                  }

                  class OutpatientDept extends Dept{
                      String address;
                      OutpatientDept(){}
                      OutpatientDept(int ID,String name,String type,String description,String address){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                          this.address=address;
                      }
                      void ToString(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                          System.out.println(address);
                      }
                  }

                  class InpatientDept extends Dept{
                      String ward;
                      InpatientDept(){}
                      InpatientDept(int ID,String name,String type,String description,String ward){
                          this.ID=ID;
                          this.name=name;
                          this.type=type;
                          this.description=description;
                          this.ward=ward;
                      }
                      void ToString(){
                          System.out.println(ID);
                          System.out.println(name);
                          System.out.println(type);
                          System.out.println(description);
                          System.out.println(ward);
                      }
                  }

                  class Hospital{
                      OutpatientDept[] A=new OutpatientDept[20];
                      InpatientDept[] B=new InpatientDept[20];
                      int k1=0,k2=0;
                      void addDept(int ID,String name,String type,String description,String choose){
                          if(type=="门诊部"){
                              A[k1]=new OutpatientDept(ID,name,type,description,choose);
                              k1++;
                          }
                          else{
                              B[k2]=new InpatientDept(ID,name,type,description,choose);
                              k2++;
                          }
                      }
                      void delDept(int ID,String type){
                          if(type=="门诊部"){
                              for(int i=0;i<k1;i++){
                                  if(A[i].ID==ID){
                                      for(int j=i+1;j<k1;j++){
                                          A[j-1]=A[j];
                                      }
                                      k1--;
                                      System.out.println("已删除门诊部"+ID+"号!");
                                      return;
                                  }
                              }
                              System.out.println("未在门诊部找到要删除的ID!");
                          }
                          else{
                              for(int i=0;i<k2;i++){
                                  if(B[i].ID==ID){
                                      for(int j=i+1;j<k2;j++){
                                          B[j-1]=B[j];
                                      }
                                      k2--;
                                      System.out.println("已删除住院部"+ID+"号!");
                                      return;
                                  }
                              }
                              System.out.println("未在住院部找到要删除的ID!");
                          }
                      }
                      void showDept(){
                          for(int i=0;i<k1;i++){
                              System.out.println("门诊部"+(i+1)+"号病人信息:");
                              A[i].ToString();
                              System.out.println();
                          }
                          for(int i=0;i<k2;i++){
                              System.out.println("住院部"+(i+1)+"号病人信息:");
                              B[i].ToString();
                              System.out.println();
                          }
                      }
                  }

                  public class Example {
                      public static void main(String args[]){
                          Hospital hos=new Hospital();
                          hos.addDept(2012,"小李","门诊部","感冒","门诊部一楼");
                          hos.addDept(2004,"小刘","门诊部","发烧","门诊部一楼");
                          hos.addDept(2025,"小黄","门诊部","呕吐","门诊部二楼");
                          hos.addDept(2002,"小王","住院部","头疼","中区");
                          hos.addDept(2037,"小季","住院部","摔伤","西区");
                          hos.addDept(2053,"小张","住院部","骨折","东区");
                          hos.showDept();
                          hos.delDept(2012,"门诊部");
                          System.out.println("删除后结果如下\n");
                          hos.showDept();
                      }
                  }




9.                package study;

                  class University{
                      void enterRule(double Math,double English,double Chinese){
                          double total=Math+English+Chinese;
                          if(total>=250){
                              System.out.println(total+":分数到达大学录取线");
                          }
                          else{
                              System.out.println(total+":分数未到达大学录取线");
                          }
                      }
                  }

                  class ImportantUniversity extends University{
                      void enterRule(double Math,double English,double Chinese){          //方法重写,原方法(父类的方法)被隐藏
                          double total=Math+English+Chinese;
                          if(total>=350){
                              System.out.println(total+":分数到达重点大学录取线");
                          }
                          else{
                              System.out.println(total+":分数未到达重点大学录取线");
                          }
                      }
                  }

                  public class Example1 {
                      public static void main(String args[]){
                          double M=110,E=130,C=110;
                          University student1=new University();
                          ImportantUniversity student2=new ImportantUniversity();
                          student1.enterRule(M,E,C);
                          student2.enterRule(M,E,C);           //调用重写后的方法
                      }
                  }

10.               package study;                               //JAVA类名和包名不区分大小写,class A和class a是一样的,会随机解析其中的一个

                  class per{
                      float weight,height;
                      String name,ID;
                      void speak(String s){
                          System.out.println(s);
                      }
                  }

                  class classmate extends per{
                      double add(double a,double b){
                          return a+b;
                      }
                  }

                  public class Example4 {
                      public static void main(String args[]){
                          classmate Tom=new classmate();
                          Tom.height=180;
                          Tom.weight=60;
                          Tom.name="汤姆";
                          Tom.ID="007";
                          Tom.speak("我是"+Tom.name+",我的身高是"+ Tom.height+"cm,我的体重是"+Tom.weight+"kg,代号"+Tom.ID+",很高兴认识你!");
                          System.out.println(Tom.add(100,200));
                      }
                  }




11.               package study;

                  class A{
                      float s(float x,float y){
                          return x+y;
                      }
                      public int g(int x,int y){
                          return x+y;
                      }
                  }

                  class B extends A{
                      float s(float x,float y){            //子类方法重写,但不能改变s的类型
                          return x*y;                      // ---double s(float x,float y),则此时B中有两个同名s函数
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          B b=new B();
                          System.out.println("方法重写:"+b.s(11,23));
                          System.out.println("方法继承:"+b.g(11,23));
                      }
                  }





12.               package study;

                  class Bank{
                      int saveMoney;
                      int year;
                      double interest;
                      public double Interest(){
                          interest=year*0.035*saveMoney;
                          //System.out.printf("%d元存在银行%d年的利息是:%f元\n",saveMoney,year,interest);
                          return interest;
                      }
                  }

                  class FirstBank extends Bank{
                      double year;                                 //隐藏了继承的year,通过调用super关键字使用被隐藏的year
                      public double Interest(){                    //子类方法重写,原Interest被隐藏
                          super.year=(int)year;                    //强制转换,得到整年
                          double littleYear=year-super.year;            //得到小数部分的年
                          int day=(int)(littleYear*365);
                          interest=super.Interest()+day*0.0001*saveMoney;
                          System.out.printf("%d元存在第一银行%d年零%d天的利息是:%f元\n",saveMoney,super.year,day,interest);
                          return interest;
                      }
                  }

                  class SecondBank extends Bank{
                      double year;
                      public double Interest(){
                          super.year=(int)year;
                          double littleYear=year-super.year;
                          int day=(int)(littleYear*365);
                          interest=super.Interest()+day*0.00012*saveMoney;
                          System.out.printf("%d元存在第二银行%d年零%d天的利息是:%f元\n",saveMoney,super.year,day,interest);
                          return interest;
                      }
                  }

                  public class Example3 {
                      public static void main(String args[]){
                          int amount=200000;
                          FirstBank bank1=new FirstBank();
                          SecondBank bank2=new SecondBank();
                          bank1.saveMoney=amount;
                          bank1.year=10.23;
                          bank2.saveMoney=amount;
                          bank2.year=10.23;
                          double interest1=bank1.Interest();
                          double interest2=bank2.Interest();
                          System.out.printf("两个银行利润相差%f元\n",interest1-interest2);
                      }
                  }




13.               package study;

                  class Student{
                      int ID;
                      String name;
                      Student(){}
                      Student(int ID,String name){
                          this.name=name;
                          this.ID=ID;
                          System.out.println("我的学号是:"+ID+",姓名是:"+name);
                      }
                  }

                  class Students extends Student{
                      boolean Marry;
                      Students(int ID,String name,boolean Marry){
                          super(ID,name);
                          this.Marry=Marry;
                          System.out.println("结婚情况:"+Marry);
                      }
                  }

                  public class Example4 {
                      public static void main(String a[]){
                          Students people=new Students(2012,"小李",true);
                      }
                  }




14.               package study;

                  class Num{
                      final double PI=3.1415;                                        //final定义常量,不允许修改
                      double GetArea(final double r){
                          System.out.println("面积:"+PI*r*r);
                          return PI*r*r;
                      }
                      final void speak(){
                          System.out.println("你好?能看见我吗?");
                      }
                  }

                  class Name extends Num{                                             //final类没有子类,不允许继承
                      void speakAgain(){                                              //final方法智能被继承,不能被重写
                          System.out.println("还能看见我吧?");
                      }
                  }

                  public class Example5 {
                      public static void main(String arg[]){
                          Num A=new Num();
                          Name B=new Name();
                          //错误:A.PI=3.14;
                          A.GetArea(12);
                          B.GetArea(12);
                          A.speak();
                          B.speak();
                          B.speakAgain();
                      }
                  }






15.               package study;

                  class 类人猿{
                      void crySpeak(String s){
                          System.out.println(s);
                      }
                  }

                  class 人 extends 类人猿{
                      void count(int a,int b){
                          System.out.println(a*b);
                      }
                      void crySpeak(String s){                   //重写后的方法
                          System.out.println("***"+s+"***");
                      }
                  }

                  public class Example6 {
                      public static void main(String arg[]){
                          类人猿 A=new 人();                      //即对象"人"的上转型对象,此时A不能使用"人"中新加入的方法或变量
                          A.crySpeak("好好学习,天天向上!");     //同时会使用"人"中重写的方法,而不是父类中的原方法
                          //A.count(10,12);
                          人 B=(人)A;                             //把上转型对象强制转化为子类对象
                          B.count(10,12);
                      }
                  }





16.               package study;

                  class Animal{
                      void cry(){}
                  }

                  class Cat extends Animal{
                      void cry(){
                          System.out.println("喵喵~~");
                      }
                  }

                  class Dog extends Animal{
                      void cry(){
                          System.out.println("汪汪~~");
                      }
                  }

                  public class Example7 {                                //多态
                      public static void main(String args[]){
                          Animal cat=new Cat();
                          cat.cry();
                          Animal dog=new Dog();
                          dog.cry();
                      }
                  }





17.               package study;

                  abstract class First{
                      abstract int sum(int a,int b);                //abstract方法只有声明,没有实现
                      int sub(int a,int b){
                          return a-b;
                      }
                  }

                  class Second extends First{                       //类 "Second" 必须声明为抽象，或为实现 "First" 中的抽象方法 "sum(int, int)"
                      int sum(int a,int b){
                          return a+b;                               //重写abstract方法
                      }
                  }

                  public class Example8 {
                      public static void main(String args[]){
                          //First A=new First();                    //'First' 为 abstract；无法实例化
                          Second B=new Second();
                          System.out.println("sum="+B.sum(11,25));
                          System.out.println("sub="+B.sub(124,45));
                      }
                  }





18.               package study;

                  class Circle{
                      double r;
                      Circle(double r){
                          this.r=r;
                      }
                      double GetArea(){
                          return 3.14*r*r;
                      }
                  }

                  class Pillar{
                      Circle bottom;
                      double height;
                      Pillar(Circle bottom,double height){
                          this.bottom=bottom;
                          this.height=height;
                      }
                      double GetVolume(){
                          return bottom.GetArea()*height;
                      }
                  }

                  public class Example9 {
                      public static void main(String ars[]){
                          Circle A=new Circle(3);
                          Pillar B=new Pillar(A,10);
                          System.out.println(B.GetVolume());
                      }
                  }





19.               package study;

                  abstract class Area{
                      abstract double GetArea();               //定义抽象类和抽象方法
                  }

                  class newPillar{
                      Area bottom;
                      double height;
                      newPillar(Area bottom,double height){
                          this.bottom=bottom;
                          this.height=height;
                      }
                      double GetVolume(){
                          return bottom.GetArea()*height;     //将体积计算抽象为底面积*高,而底面积则由后续Area的子类重写方法计算
                      }
                  }

                  class newCircle extends Area{
                      double r;
                      newCircle(double r){
                          this.r=r;
                      }
                      double GetArea(){
                          return 3.14*r*r;
                      }
                  }

                  class newRectangle extends Area{
                      double a,b;
                      newRectangle(double a,double b){
                          this.a=a;
                          this.b=b;
                      }
                      double GetArea(){
                          return a*b;
                      }
                  }

                  public class Example10 {
                      public static void main(String args[]){
                          Area bottom;
                          newPillar pillar;
                          bottom=new newCircle(3);                           //上转型对象
                          pillar=new newPillar(bottom,10);
                          System.out.println("圆柱体积:"+pillar.GetVolume());
                          bottom=new newRectangle(5,7);
                          pillar=new newPillar(bottom,10);
                          System.out.println("棱柱体积:"+pillar.GetVolume());
                      }
                  }





20.               package study;

                  abstract class Area{                       //抽象面积
                      abstract double GetArea();
                  }

                  class Circle extends Area{
                      double r;
                      Circle(double r){
                          this.r=r;
                      }
                      double GetArea(){                       //具体面积1
                          return 3.14*r*r;
                      }
                  }

                  class Rectangle extends Area{
                      double a,b;
                      Rectangle(int a,int b){
                          this.a=a;
                          this.b=b;
                      }
                      double GetArea(){                        //具体面积2
                          return a*b;
                      }
                  }

                  class Sum{
                      double SumArea(Area...x){                //可变参数的使用
                          double s=0;
                          for(int i=0;i<x.length;i++){
                              s+=x[i].GetArea();
                          }
                          return s;
                      }
                  }

                  public class Example1 {
                      public static void main(String ars[]){
                          Sum sum=new Sum();
                          double area=sum.SumArea(new Circle(9),new Rectangle(4,6),new Circle(4.2));
                          System.out.println("面积和为:"+area);
                      }
                  }




21.               package study;

                  interface Computer{                         //interface定义接口
                      public int Max=10;
                      public abstract int sum(int a);         //接口中只允许有常量和抽象方法,分别用public和public abstract修饰,可省略
                  }

                  class One implements Computer{              //用implements将接口引入非抽象类中实现(抽象类则不一定实现)
                      int ID;
                      public int sum(int a){                  //记住要用public修饰
                          int s=0;
                          for(int i=1;i<=a;i++){
                              s+=i;
                          }
                          return s;
                      }
                  }

                  class Two implements Computer{
                      int ID;
                      public int sum(int a){
                          int s=1;
                          for(int i=2;i<=a;i++){
                              s=s*i;
                          }
                          return s;
                      }
                  }

                  public class Example2 {
                      public static void main(String args[]){
                          One a=new One();
                          Two b=new Two();
                          a.ID=202012+Computer.Max;
                          b.ID=202141+Computer.Max;
                          System.out.println("小a的学号是:"+a.ID+",他的求和结果是:"+a.sum(20));
                          System.out.println("小b的学号是:"+b.ID+",他的求积结果是:"+b.sum(10));
                      }
                  }





22.               package study;

                  interface ShowMessage{
                      void Show(String S);
                  }

                  class TV implements ShowMessage{
                      public void Show(String S){
                          System.out.println(S);
                      }
                      int sum(int a,int b){
                          return a+b;
                      }
                  }

                  class PC implements ShowMessage{
                      public void Show(String S){
                          System.out.println(S);
                      }
                  }

                  public class Example3 {
                      public static void main(String ats[]){
                          ShowMessage a;                               //接口变量
                          a=new TV();                                  //接口回调
                          a.Show("喜马拉雅电视机");                   //可以使用类实现的接口方法,但不能使用类原本的方法
                          //a.sum(10,20);
                          a=new PC();
                          a.Show("MacBook");
                      }
                  }




23.               package study;

                  interface Average{
                      public abstract double average(double a,double b);
                  }

                  class A implements Average{
                      public double average(double a,double b){
                          return (a+b)/2;
                      }
                  }

                  class B implements Average{
                      public double average(double a,double b){
                          return Math.sqrt(a*b);                                //Math方法
                      }
                  }

                  public class Example4 {
                      public static void main(String args[]){
                          Average a;                                            //接口多态,同一接口的不同实现
                          double x=12.2,y=39;
                          a=new A();
                          System.out.printf("%5.2f和%5.2f的算数平均值:%5.2f\n",x,y,a.average(x,y));
                          a=new B();
                          System.out.printf("%5.2f和%5.2f的几何平均值:%5.2f\n",x,y,a.average(x,y));
                      }
                  }





24.               package study;

                  interface Average{
                      public abstract double average(double a,double b);
                  }

                  class A implements Average{
                      public double average(double a,double b){
                          return (a+b)/2;
                      }
                  }

                  class B implements Average{
                      public double average(double a,double b){
                          return Math.sqrt(a*b);                                //Math方法
                      }
                  }

                  class num{
                      double number(double x,double y,Average a){               //接口变量做参数
                          return a.average(x,y);
                      }
                  }

                  public class Example4 {
                      public static void main(String args[]){
                          Average a;                                            //接口多态,同一接口的不同实现
                          double x=12.2,y=39;
                          a=new A();
                          System.out.printf("%5.2f和%5.2f的算数平均值:%5.2f\n",x,y,a.average(x,y));
                          a=new B();
                          System.out.printf("%5.2f和%5.2f的几何平均值:%5.2f\n",x,y,a.average(x,y));
                          num result=new num();
                          System.out.println(result.number(x,y,new A()));
                          System.out.println(result.number(x,y,new B()));
                      }
                  }




25.               package study;

                  interface SpeakHello{
                      public abstract void speak();
                  }

                  class Chinese implements SpeakHello{
                      public void speak(){
                          System.out.println("中国问候:你好,吃饭了吗?");
                      }
                  }

                  class English implements SpeakHello{
                      public void speak(){
                          System.out.println("英国问候:你好,今天天气不错.");
                      }
                  }

                  class Hello{
                      void hello(SpeakHello a){             //接口变量做参数
                          a.speak();
                      }
                  }

                  public class Example5 {
                      public static void main(String args[]){
                          Hello people=new Hello();
                          people.hello(new Chinese());      //省去步骤:SpeakHello a;  a=new Chinese();  people.hello(a);
                          people.hello(new English());
                      }
                  }





26.               package study;

                  interface Advertise{
                      void ShowAdvertise();
                      String GetName();
                  }

                  class AdvertiseBoard{
                      void Show(Advertise a){
                          System.out.println(a.GetName()+"的广告词如下:");
                          a.ShowAdvertise();
                      }
                  }

                  class CropA implements Advertise{
                      public void ShowAdvertise(){
                          System.out.println("好好学习,天天向上!!!");
                      }
                      public String GetName(){
                          return "步步高";
                      }
                  }

                  class CropB implements Advertise{
                      public void ShowAdvertise(){
                          System.out.println("生前何必久睡,死后自会长眠~~");
                      }
                      public String GetName(){
                          return "清凉油";
                      }
                  }

                  public class Example6 {
                      public static void main(String args[]){
                          AdvertiseBoard a=new AdvertiseBoard();
                          a.Show(new CropA());
                          a.Show(new CropB());
                      }
                  }




27.               package study;

                  interface DogState{
                      void ShowState();
                  }

                  class Dog{
                      DogState state;
                      void setState(DogState state){
                          this.state=state;
                      }
                      void Cry(){
                          state.ShowState();
                      }
                  }

                  class Dog1 implements DogState{
                      public void ShowState(){
                          System.out.println("高兴:摇尾巴~~");
                      }
                  }

                  class Dog2 implements DogState{
                      public void ShowState(){
                          System.out.println("生气:大叫~~");
                      }
                  }

                  class Dog3 implements DogState{
                      public void ShowState(){
                          System.out.println("害怕:夹着尾巴~~");
                      }
                  }

                  public class Example7 {
                      public static void main(String arf[]){
                          Dog dog=new Dog();
                          dog.setState(new Dog1());
                          dog.Cry();
                          dog.setState(new Dog2());
                          dog.Cry();
                          dog.setState(new Dog3());
                          dog.Cry();
                      }
                  }





28.               package study;

                  import java.io.UnsupportedEncodingException;
                  import java.nio.charset.StandardCharsets;
                  import java.util.Locale;

                  public class Example1 {
                      public static void main(String args[]){
                          String s="I like sleeping!";
                          System.out.println(s.charAt(3));
                          //s.charAt() 方法用于返回指定索引处的字符。索引范围为从 0 到 length() - 1
                          System.out.println(s.length());
                          //s.length() 方法计算字符串s长度
                          String q="I like studying!";
                          System.out.println(s.equals(q));
                          //s.equals(q) 方法用于比较s和q是否相同
                          System.out.println(s.equalsIgnoreCase(q));
                          //s.equalsIgnoreCase(q) 方法用于比较s和q是否相同,忽略大小写
                          System.out.println(s.startsWith("I like"));
                          //s.startsWith("I like") 方法用于判断s的前缀是否为"I like"
                          System.out.println(s.endsWith("studying!"));
                          //s.endsWith("studying!") 方法用于判断s的后缀是否为"studying!"
                          System.out.println(s.compareTo(q));
                          //s.compareTo(q) 方法用于比较s和q,s==q,0;s>q,返回正值;s<q,返回负值
                          System.out.println(s.compareToIgnoreCase("I"));
                          //s.compareToIgnoreCase("I") 方法也用于比较s和"I",但忽略大小写
                          System.out.println(s.concat("What about you?"));
                          //s.concat("What about you?") 方法用于在s后加上字符串"What about you?"
                          System.out.println(s.contains("lik"));
                          //s.contains("lik") 方法用于判断s中是否含有"lik"字符串
                          System.out.println(s.indexOf("li"));
                          //s.contains("li") 方法用于从头检索s中是否出现"li"字符串,返回其首次出现的位置
                          System.out.println(s.indexOf("li",4));
                          //s.contains("li",4) 方法用于从第四位开始检索s中是否出现"li"字符串,返回其首次出现的位置
                          System.out.println(s.lastIndexOf("li"));
                          //s.contains("li") 方法用于检索s中是否出现"li"字符串,返回其最后出现的位置
                          System.out.println(s.substring(3));
                          //s.substring(3) 方法用于得到从s的第三位处开始截取到最后得到的子串
                          System.out.println(s.substring(2,4));
                          //s.substring(2,4) 方法用于得到从s的第二位处开始截取到第四位处得到的子串(不包括第四位)
                          System.out.println("   我 爱 睡 觉   ".trim());
                          //"   我 爱 睡 觉   ".trim() 方法用于得到"   我 爱 睡 觉   "去掉前后空格的字符串
                          System.out.println(s.replace("like","dislike"));
                          //s.replace("like","dislike") 方法用于将s中like替换为dislike
                          System.out.println(s.replaceAll("[\\s]","*"));
                          //s.replaceAll("[\\s]","*") 方法用于将s中用正则表达式表达的一部分字符替换为后面的字符串
                          byte a[]=s.getBytes();
                          //s.getBytes() 方法用于将s使用平台默认编码转化为一个字节数组
                          String b=new String(a,0,a.length);
                          //将字节数组又转化为字符串
                          System.out.println(a);
                          System.out.println(b);
                          //输出查看
                          try {
                              System.out.println(s.getBytes("GB2312"));
                          } catch (UnsupportedEncodingException e) {
                              e.printStackTrace();
                          }
                          //s.getBytes("GB2312") 方法用于将s使用指定编码转化为一个字节数组,要在try-catch语句中调用
                          String out[]=s.split("\\s");
                          for(int i=0;i<out.length;i++){
                              System.out.println(out[i]);
                          }
                          //s.split("\\s") 方法用于将s按空格分开,并将分开后的字符串存储在字符串数组中
                          System.out.println(s.toLowerCase());
                          //toLowerCase() 方法将字符串转换为小写
                          System.out.println(s.toUpperCase());
                          //s.toUpperCase() 方法将字符串转换为大写
                      }
                  }




29.               package study;
                  import java.util.Random;

                  public class Example3 {
                      public static void main(String args[]){
                          Random r=new Random();
                          for(int i=0;i<4;i++){
                              int num=r.nextInt(26);                    //生成0~25的随机数
                              char result=(char)(num+97);               //随机数加上97得到97~122的数,将其强制转换为char类型,得到小写字母a~z
                              System.out.print(result);
                          }
                      }
                  }




30.               package study;

                  public class Example2 {
                      public static void main(String args[]){
                          int n=9;
                          for(int i=1;i<=n;i++){                        //输出n排
                              for(int k=1;k<=n-i;k++){                  //每一排前空格个数
                                  System.out.print(" ");
                              }
                              for(int j=1;j<=2*(i-1)+1;j++){            //每一排*的个数
                                  System.out.print("*");
                              }
                              System.out.println();
                          }
                      }
                  }





31.               package study;

                  import java.util.ArrayList;
                  import java.util.concurrent.locks.StampedLock;

                  class Student{                                      //JavaBean规范:private定义变量,public set+get使用变量
                      private String name;
                      private String ID;
                      private String sex;
                      private int age;
                      public void setName(String name){
                          this.name=name;
                      }
                      public void setID(String ID){
                          this.ID=ID;
                      }
                      public void setSex(String sex){
                          this.sex=sex;
                      }
                      public void setAge(int age){
                          this.age=age;
                      }
                      public String getName(){
                          return name;
                      }
                      public String getID(){
                          return ID;
                      }
                      public String getSex(){
                          return sex;
                      }
                      public int getAge(){
                          return age;
                      }
                      public String toString(){
                          String result="{姓名:"+getName()+"学号"+getID()+"性别"+getSex()+"年龄"+getAge()+"}\n";
                          return result;
                      }
                  }

                  public class Example4 {
                      public static void main(String[] args){
                          ArrayList<Student> students=new ArrayList<>();
                          Student A=new Student();
                          Student B=new Student();
                          Student C=new Student();
                          A.setName("小李");A.setID("10085");A.setSex("男");A.setAge(18);      //构建学生数据
                          B.setName("小刘");B.setID("10086");B.setSex("女");B.setAge(20);
                          C.setName("小黄");C.setID("10087");C.setSex("男");C.setAge(22);
                          students.add(A);
                          students.add(B);
                          students.add(C);
                          System.out.println(students.toString());
                      }
                  }




32.               package study;

                  import java.text.SimpleDateFormat;
                  import java.util.Calendar;
                  import java.util.Date;

                  public class ExampleB {
                      public static void main(String[] args){
                          SimpleDateFormat d=new SimpleDateFormat("yyyy年MM月dd日");         //格式化时间
                          Calendar now=Calendar.getInstance();                                      //获取当前日历
                          //Date date=new Date();
                          System.out.println("今天是:");
                          System.out.println(d.format(now.getTime()));                              //输出当前日期
                          //System.out.println(d.format(date));
                          System.out.println("150天后是:");
                          now.add(Calendar.DATE,150);                                       //日期延后150天
                          System.out.println(d.format(now.getTime()));                              //输出150天后的日期
                      }
                  }




33.               package study;

                  interface Computer{
                      void MyComputer();
                      public abstract void Get();
                  }

                  class HP implements Computer{
                      public void MyComputer(){
                          System.out.println("惠普电脑:");
                      }
                      public void Get(){
                          System.out.println("显卡:A1");
                          System.out.println("内存:A2");
                          System.out.println("CPU:A3");
                      }
                  }

                  class Lenovo implements Computer{
                      public void MyComputer(){
                          System.out.println("联想电脑:");
                      }
                      public void Get(){
                          System.out.println("显卡:B1");
                          System.out.println("内存:B2");
                          System.out.println("CPU:B3");
                      }
                  }

                  class Apple implements Computer{
                      public void MyComputer(){
                          System.out.println("苹果电脑:");
                      }
                      public void Get(){
                          System.out.println("显卡:C1");
                          System.out.println("内存:C2");
                          System.out.println("CPU:C3");
                      }
                  }

                  class AllComputer{
                      void Out(Computer com){                       //接口变量做参数
                          com.MyComputer();
                          com.Get();
                      }
                  }

                  public class ExampleA {
                      public static void main(String[] args){
                          AllComputer Mine=new AllComputer();
                          Mine.Out(new HP());
                          Mine.Out(new Lenovo());
                          Mine.Out(new Apple());
                      }
                  }




34.               package study;

                  import java.util.ArrayList;
                  import java.util.Random;

                  class People{
                      private String name;
                      private int ID;
                      private int Year;
                      private int age;
                      public void setName(String name){
                          this.name=name;
                      }
                      public void setID(int ID){
                          this.ID=ID;
                      }
                      public void setYear(int Year){
                          this.Year=Year;
                      }
                      public void setAge(int age){
                          this.age=age;
                      }
                      public String getName(){
                          return name;
                      }
                      public int getID(){
                          return ID;
                      }
                      public int getYear(){
                          return Year;
                      }
                      public int getAge(){
                          return age;
                      }
                      public String toString(){                                    //toString方法重写
                          String result="{姓名:"+getName()+"  学号"+getID()+"  入学年份"+getYear()+"  年龄"+getAge()+"}\n";
                          return result;
                      }
                  }

                  public class ExampleA {
                      public static void main(String[] args){
                          ArrayList<People> students=new ArrayList<>();
                          for(int k=0;k<10;k++){                                       //十次循环,每次把创建的student对象放入ArrayList重
                              People A=new People();
                              Random num=new Random();
                              char[] name=new char[5];
                              for(int i=0;i<5;i++) {
                                  name[i]=(char)(num.nextInt(26)+97);           //把97~122的随机小写字母放入字符数组中
                              }
                              A.setName(new String(name));
                              A.setYear(num.nextInt(6)+2015);                    //生成2015~2020的随机年份
                              A.setAge(A.getYear()-1994);
                              A.setID(A.getYear()*10+k);                                //学号=年份+该年份入学顺序
                              students.add(A);                                          //将学生数据加入ArrayList中
                          }

                          //加入数据完成,开始循环按年份输出信息
                          //System.out.println(students.toString());

                          for(int j=0;j<6;j++){                                         //6年,进行6次循环查找输出
                              int beginYear=2015+j;
                              int result=0;
                              for(int k=0;k<10;k++){
                                  if(students.get(k).getYear()==beginYear) {
                                      result++;
                                  }
                              }
                              System.out.println(beginYear+":"+result);
                              for(int k=0;k<10;k++){
                                  if(students.get(k).getYear()==beginYear) {
                                      System.out.print(students.get(k).toString());
                                  }
                              }
                          }
                      }
                  }




35.               package study;

                  import java.util.ArrayList;
                  import java.util.Random;

                  class People{
                      private String name;
                      private int ID;
                      private int Year;
                      private int age;
                      public void setName(String name){
                          this.name=name;
                      }
                      public void setID(int ID){
                          this.ID=ID;
                      }
                      public void setYear(int Year){
                          this.Year=Year;
                      }
                      public void setAge(int age){
                          this.age=age;
                      }
                      public String getName(){
                          return name;
                      }
                      public int getID(){
                          return ID;
                      }
                      public int getYear(){
                          return Year;
                      }
                      public int getAge(){
                          return age;
                      }
                      public String toString(){                                    //toString方法重写
                          String result="{姓名:"+getName()+"  学号"+getID()+"  入学年份"+getYear()+"  年龄"+getAge()+"}\n";
                          return result;
                      }
                  }

                  public class ExampleA {
                      public static void main(String[] args){
                          ArrayList<People> students=new ArrayList<>(10);
                          for(int k=0;k<10;k++){                                       //十次循环,每次把创建的student对象放入ArrayList重
                              People A=new People();
                              Random num=new Random();
                              char[] name=new char[5];
                              for(int i=0;i<5;i++) {
                                  name[i]=(char)(num.nextInt(26)+97);           //把97~122的随机小写字母放入字符数组中
                              }
                              A.setName(new String(name));
                              A.setYear(num.nextInt(6)+2016);                    //生成2016~2021的随机年份
                              A.setAge(A.getYear()-1994);
                              int order=1;
                              for(int i=0;i<k;i++){                                    //在当前已经生成的学生数据中进行查找,判断当年的入学顺序
                                  if(A.getYear()==students.get(i).getYear()) {
                                      order++;
                                  }                                                     //否则该生为当年第一个入学的学生
                              }
                              A.setID(A.getYear()*10+order);                            //学号=年份+该年份入学顺序
                              students.add(A);                                          //将学生数据加入ArrayList中
                          }

                          //加入数据完成,开始循环按年份输出信息
                          //System.out.println(students.toString());

                          for(int j=0;j<6;j++){                                         //6年,进行6次循环查找输出
                              int beginYear=2016+j;                                     //从2016年开始对每年进行查找入学人数并输出
                              int result=0;
                              for(int k=0;k<10;k++){
                                  if(students.get(k).getYear()==beginYear) {
                                      result++;
                                  }
                              }
                              System.out.println(beginYear+":"+result);
                              for(int k=0;k<10;k++){
                                  if(students.get(k).getYear()==beginYear) {
                                      System.out.print(students.get(k).toString());
                                  }
                              }
                          }
                      }
                  }




36.               package study;

                  import java.sql.Connection;
                  import java.sql.DriverManager;
                  import java.sql.ResultSet;
                  import java.sql.Statement;

                  public class Example1 {
                      public static void main(String[] args) {
                          String URL="jdbc:mysql://localhost:3306/abc";            //mysql> show databases;查看MySQL含有的数据库,选择其中一个连接
                          String UserName="CaoQian";                               //用户名
                          String PassWord="cq2227558856";                          //密码
                          String tableName="select * from classa";                 //定义要查找的表
                          try{
                              // 加载数据库驱动类
                              Class.forName("com.mysql.cj.jdbc.Driver");
                              System.out.println("数据库驱动加载成功");
                              // 获取数据库连接对象
                              Connection con=null;
                              con=DriverManager.getConnection(URL,UserName,PassWord);
                              if(con!=null){
                                  System.out.println("数据库连接成功");
                              }
                              /*
                              构造一个statement对象来执行sql语句：主要有Statement，PreparedStatement，CallableStatement三种实例来实现
                              Statement stmt = con.createStatement() ;
                              PreparedStatement pstmt = conn.prepareStatement(sql) ;
                              CallableStatement cstmt = conn.prepareCall("{CALL demoSp(? , ?)}") ;
                              */
                              String sql = "insert into classa(ID,name,age)"
                                      + " values ('10120', 'B', '20')"; // 插入数据的sql语句
                              Statement st=con.createStatement();  // 创建用于执行静态sql语句的Statement对象
                              int count = st.executeUpdate(sql); // 执行插入操作的sql语句，并返回插入数据的个数
                              System.out.println("向表中插入了 " + count + " 条数据"); //输出插入操作的处理结果
                              ResultSet rs=st.executeQuery(tableName);
                              //遍历结果集rs
                              while(rs.next()){
                                  System.out.println("学号:"+rs.getString("ID")+"姓名:"+rs.getString("name")+"年龄:"+rs.getString("age"));
                              }
                          } catch (Exception e){
                              e.printStackTrace();
                          }

                      }
                  }




37.               package hospital.dao.impl;

                  import java.sql.*;
                  import hospital.dao.PatientDao;
                  import hospital.vo.Patient;

                  import java.util.ArrayList;
                  import java.util.List;


                  /**
                   * @author 实现接口
                   * 实现接口中定义的方法
                   */
                  public class PatientDaoImpl implements PatientDao{
                      /**
                       * 1.定义数据库连接对象
                       * 2.定义数据库操作对象
                       */
                      private Connection conn=null;
                      private PreparedStatement pstmt=null;

                      /**
                       * 构造函数
                       * @param conn
                       */
                      public PatientDaoImpl(Connection conn){
                          this.conn=conn;
                      }

                      @Override
                      public boolean addPatient(Patient patient) throws Exception{
                          int flag=0;
                          String sql="INSERT INTO patient(id,name,age,disease,part) VALUES("+patient.getId()+",'"+patient.getName()+"','"+patient.getAge()+"','"+patient.getDisease()+"','"+patient.getPart()+"')";
                          //将patient中的数据放入pstmt中
                          Statement st=conn.createStatement();
                          flag=st.executeUpdate(sql);
                          //若更新记录行数大于0,即添加成功,修改flag
                          if(flag!=0) {
                              return true;
                          }
                          this.pstmt.close();
                          return false;
                      }

                      @Override
                      public boolean deletePatient(String id) throws Exception{
                          int flag=0;
                          String sql="DELETE FROM patient WHERE id="+id;
                          Statement st=conn.createStatement();
                          ////flag接收方法的返回值，为0 表示删除失败
                          flag=st.executeUpdate(sql);
                          if(flag!=0) {
                              return true;
                          }
                          this.pstmt.close();
                          return false;
                      }

                      @Override
                      public List<Patient> findPatient(String key) throws Exception{
                          List<Patient> all=new ArrayList<Patient>();
                          //设置查询关键字
                          String sql="SELECT id,name,age,disease,part FROM patient WHERE id LIKE ? OR name LIKE ? OR age LIKE ? OR disease LIKE ? OR part LIKE ?";
                          this.pstmt=this.conn.prepareStatement(sql);
                          this.pstmt.setString(1,"%"+key+"%");
                          this.pstmt.setString(2,"%"+key+"%");
                          this.pstmt.setString(3,"%"+key+"%");
                          this.pstmt.setString(4,"%"+key+"%");
                          this.pstmt.setString(5,"%"+key+"%");
                          //执行查询操作
                          ResultSet rs=this.pstmt.executeQuery();
                          Patient patient=null;
                          //依次取出符合条件的每条数据,将数据存入List
                          while(rs.next()){
                              patient=new Patient();
                              patient.setId(rs.getString(1));
                              patient.setName(rs.getString(2));
                              patient.setAge(rs.getString(3));
                              patient.setDisease(rs.getString(4));
                              patient.setPart(rs.getString(5));
                              all.add(patient);
                          }
                          this.pstmt.close();
                          return all;
                      }

                  }




38.                 package hospital.dao.proxy;

                    import java.util.List;
                    import hospital.vo.Patient;
                    import hospital.dao.PatientDao;
                    import hospital.dao.impl.PatientDaoImpl;
                    import hospital.dbc.DatabaseConnection;

                    /**
                     * @author 代理接口
                     * 负责数据库的打开和关闭及调用真实实现类对象操作：
                     */
                    public class PatientDaoProxy implements PatientDao{
                        private DatabaseConnection dbc=null;
                        private PatientDao dao=null;

                        /**
                         * 构造函数,实例化连接，同时实例化dao对象
                         */
                        public PatientDaoProxy() throws Exception{
                            // 连接数据库
                            this.dbc=new DatabaseConnection();
                            //实例化真实主题类
                            this.dao=new PatientDaoImpl(this.dbc.getConnection());
                        }

                        @Override
                        public boolean addPatient(Patient patient) throws Exception{
                            boolean flag=false;
                            try{
                                //在新加入的病人id不存在的情况下才能加入(id是唯一的)
                                if(this.dao.findPatient(patient.getId())==null){
                                    flag=this.dao.addPatient(patient);
                                    System.out.println("添加成功");
                                }
                            }catch (Exception e){
                                throw e;
                            }finally {
                                this.dbc.close();
                            }
                            return flag;
                        }

                        @Override
                        public boolean deletePatient(String id) throws Exception{
                            boolean flag=false;
                            try{
                                //在要删除的病人id存在的情况下才能删除
                                if(this.dao.findPatient(id)==null){
                                    flag=this.dao.deletePatient(id);
                                    System.out.println("删除成功");
                                }
                            }catch (Exception e){
                                throw e;
                            }finally {
                                this.dbc.close();
                            }
                            return flag;
                        }

                        @Override
                        public List<Patient> findPatient(String key) throws Exception{
                            List<Patient> all=null;
                            try{
                                all=this.dao.findPatient(key);
                            }catch (Exception e){
                                throw e;
                            }finally {
                                this.dbc.close();
                            }
                            return all;
                        }
                    }




39.                 
