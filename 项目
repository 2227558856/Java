一.Java根据DAO接口连接数据库,实现用户数据的增删查

1.              
package hospital.dao.impl;

import java.sql.*;
import hospital.dao.PatientDao;
import hospital.vo.Patient;

import java.util.ArrayList;
import java.util.List;


/**
 * @author 实现接口
 * 实现接口中定义的方法
 */
public class PatientDaoImpl implements PatientDao{
    /**
     * 1.定义数据库连接对象
     * 2.定义数据库操作对象
     */
    private Connection conn=null;
    private PreparedStatement pstmt=null;

    /**
     * 构造函数
     * @param conn
     */
    public PatientDaoImpl(Connection conn){
        this.conn=conn;
    }

    @Override
    public boolean addPatient(Patient patient) throws Exception{
        String sql = "INSERT INTO patient (id,name,age,disease,part) VALUES (?,?,?,?,?)";
        //将patient中的数据放入pstmt中
        this.pstmt = this.conn.prepareStatement(sql);
        this.pstmt.setString(1, patient.getId());
        this.pstmt.setString(2, patient.getName());
        this.pstmt.setString(3, patient.getAge());
        this.pstmt.setString(4, patient.getDisease());
        this.pstmt.setString(5, patient.getPart());
        //若更新记录行数大于0,即添加成功,修改flag
        if(this.pstmt.executeUpdate()>0) {
            return true;
        }
        this.pstmt.close();
        return false;
    }

    @Override
    public boolean deletePatient(String id) throws Exception{
        int flag=0;
        String sql="DELETE FROM patient WHERE id LIKE ?";
        this.pstmt = this.conn.prepareStatement(sql);
        this.pstmt.setString(1,id);
        ////flag接收方法的返回值，为0 表示删除失败
        flag=this.pstmt.executeUpdate();
        if(flag>0) {
            return true;
        }
        this.pstmt.close();
        return false;
    }

    @Override
    public List<Patient> findPatient(String key) throws Exception{
        List<Patient> all=new ArrayList<Patient>();
        //设置查询关键字
        String sql="SELECT id,name,age,disease,part FROM patient WHERE name LIKE ? OR age LIKE ? OR disease LIKE ? OR part LIKE ?";
        this.pstmt=this.conn.prepareStatement(sql);
        this.pstmt.setString(1,"%"+key+"%");
        this.pstmt.setString(2,"%"+key+"%");
        this.pstmt.setString(3,"%"+key+"%");
        this.pstmt.setString(4,"%"+key+"%");
        //执行查询操作
        ResultSet rs=this.pstmt.executeQuery();
        Patient patient=null;
        //依次取出符合条件的每条数据,将数据存入List
        while(rs.next()){
            patient=new Patient();
            patient.setId(rs.getString(1));
            patient.setName(rs.getString(2));
            patient.setAge(rs.getString(3));
            patient.setDisease(rs.getString(4));
            patient.setPart(rs.getString(5));
            all.add(patient);
        }
        this.pstmt.close();
        return all;
    }

    @Override
    public Patient findPatientById(String id) throws Exception{
        Patient patient=null;
        //设置查询关键字
        String sql="SELECT id,name,age,disease,part FROM patient WHERE id LIKE ?";
        this.pstmt=this.conn.prepareStatement(sql);
        pstmt.setString(1,id);
        //执行查询操作
        ResultSet rs=pstmt.executeQuery();
        //如果查到id,放入对应数据
        if(rs.next()){
            patient=new Patient();
            patient.setId(rs.getString(1));
            patient.setName(rs.getString(2));
            patient.setAge(rs.getString(3));
            patient.setDisease(rs.getString(4));
            patient.setPart(rs.getString(5));
        }
        //否则,将patient设为0,0,0,0,0
        else{
            patient=new Patient();
            patient.setId("0");
            patient.setName("0");
            patient.setAge("0");
            patient.setDisease("0");
            patient.setPart("0");
        }
        this.pstmt.close();
        return patient;
    }

    @Override
    public List<Patient> findAll() throws Exception{
        List<Patient> all=new ArrayList<Patient>();
        //设置查询关键字
        String sql="SELECT id,name,age,disease,part FROM patient";
        this.pstmt=this.conn.prepareStatement(sql);
        //执行查询操作
        ResultSet rs=this.pstmt.executeQuery();
        Patient patient=null;
        //依次取出符合条件的每条数据,将数据存入List
        while(rs.next()){
            patient=new Patient();
            patient.setId(rs.getString(1));
            patient.setName(rs.getString(2));
            patient.setAge(rs.getString(3));
            patient.setDisease(rs.getString(4));
            patient.setPart(rs.getString(5));
            all.add(patient);
        }
        this.pstmt.close();
        return all;
    }
}






2.
package hospital.dao.proxy;

import java.util.List;
import java.util.Objects;

import hospital.vo.Patient;
import hospital.dao.PatientDao;
import hospital.dao.impl.PatientDaoImpl;
import hospital.dbc.DatabaseConnection;

/**
 * @author 代理接口
 * 负责数据库的打开和关闭及调用真实实现类对象操作：
 */
public class PatientDaoProxy implements PatientDao{
    private DatabaseConnection dbc=null;
    private PatientDao dao=null;

    /**
     * 构造函数,实例化连接，同时实例化dao对象
     */
    public PatientDaoProxy() throws Exception{
        // 连接数据库
        this.dbc=new DatabaseConnection();
        //实例化真实主题类
        this.dao=new PatientDaoImpl(this.dbc.getConnection());
    }

    @Override
    public boolean addPatient(Patient patient) throws Exception{
        try{
            //在新加入的病人id不存在的情况下才能加入(id是唯一的)
            Patient patientA=this.dao.findPatientById(patient.getId());
            if(Objects.equals(patientA.getId(), "0")){
                System.out.println("添加成功!");
                this.dao.addPatient(patient);
                return true;
            }
        }catch (Exception e){
            throw e;
        }finally {
            this.dbc.close();
        }
        System.out.println("添加失败!");
        return false;
    }

    @Override
    public boolean deletePatient(String id) throws Exception{
        try{
            //在要删除的病人id存在的情况下才能删除
            Patient patientB=this.dao.findPatientById(id);
            if(!Objects.equals(patientB.getId(), "0")){
                System.out.println("删除成功!");
                this.dao.deletePatient(id);
                return true;
            }
        }catch (Exception e){
            throw e;
        }finally {
            this.dbc.close();
        }
        System.out.println("删除失败!");
        return false;
    }

    @Override
    public List<Patient> findPatient(String key) throws Exception{
        List<Patient> all=null;
        try{
            all=this.dao.findPatient(key);
        }catch (Exception e){
            throw e;
        }finally {
            this.dbc.close();
        }
        return all;
    }

    @Override
    public Patient findPatientById(String id) throws Exception{
        Patient patient=null;
        try{
            patient=this.dao.findPatientById(id);
        }catch (Exception e){
            throw e;
        }finally {
            this.dbc.close();
        }
        return patient;
    }
    @Override
    public List<Patient> findAll() throws Exception{
        List<Patient> all=null;
        try{
            all=this.dao.findAll();
        }catch (Exception e){
            throw e;
        }finally {
            this.dbc.close();
        }
        return all;
    }
}





3.
package hospital.dao;

import hospital.vo.*;

import java.util.List;

/**
 * @author 数据库操作接口
 */
public interface PatientDao {
    /**
     * 添加病人数据
     * @param patient
     * @return
     * @throws Exception
     * 返回true or false,在方法内完成对patient的写入数据库操作并判断是否成功
     */
    boolean addPatient(Patient patient) throws Exception;

    /**
     * 按照id删除病人数据
     *
     * @param id
     * @return
     * @throws Exception
     * 返回true or false判断是否成功
     */
    boolean deletePatient(String id) throws Exception;

    /**
     * 按照key查找病人数据(姓名,年龄,病症,科室)
     *
     * @param key
     * @return返回所有key对应的病人数据,存在List中
     * @throws Exception
     */
    List<Patient> findPatient(String key) throws Exception;

    /**
     * 按照id查找病人数据
     * @param id
     * @return返回id对应的唯一病人数据
     * @throws Exception
     */
    Patient findPatientById(String id) throws Exception;

    /**
     * 查询所有数据
     * @return 所有数据的列表
     * @throws Exception
     */
    List<Patient> findAll() throws Exception;
}



4.
package hospital.dbc;

import java.sql.*;

/**
 * @author 数据库连接
 */
public class DatabaseConnection {
    /**
     * 1.定义数据库驱动
     * 2.数据库连接地址
     * 3.数据库连接用户名
     * 4.数据库连接密码
     * 5.声明数据库连接对象
     */
    private static final String DBDRIVER ="com.mysql.cj.jdbc.Driver";
    private static final String DBURL="jdbc:mysql://localhost:3306/hospital";
    private static final String DBUSER="CaoQian";
    private static final String DBPASSWORD="cq2227558856";
    private Connection conn=null;
    /**
     * 构造函数:
     * 1.加载驱动
     * 2.取得数据库连接
     */
    public DatabaseConnection() throws Exception{
        try{
            Class.forName(DBDRIVER);
            this.conn=DriverManager.getConnection(DBURL,DBUSER,DBPASSWORD);
        }catch (Exception e){
            throw e;
        }
    }
    /**
     * 连接数据库
     */
    public Connection getConnection(){
        return this.conn;
    }
    /**
     * 关闭数据库
     */
    public void close() throws  Exception{
        if(this.conn!=null){
            try{
                this.conn.close();
            }catch (Exception e){
                throw e;
            }
        }
    }
}



5.
package hospital.factory;

import hospital.dao.PatientDao;
import hospital.dao.proxy.PatientDaoProxy;

/**
 * @author 取得DAO实例
 * 直接返回DAO接口的实例化对象，以后客户端直接通过工厂类就可以取得DAO接口的实例化对象
 */
public class DaoFactory {
    public static PatientDao getPatientDaoInstance() throws Exception{
        //返回代理实例
        return new PatientDaoProxy();
    }
}




6.
package hospital.test;

import hospital.factory.DaoFactory;
import hospital.vo.Patient;

import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

/**
 * @author 测试功能
 */
public class Test {
    public static void main(String[] args) throws Exception{
        //添加操作
        Patient patient=new Patient();
        patient.setId("2010301");
        patient.setName("小灵");
        patient.setAge("20");
        patient.setDisease("腿疼");
        patient.setPart("骨科");
        DaoFactory.getPatientDaoInstance().addPatient(patient);

        //删除操作
        System.out.println("请输入要删除的病人身份证号:");
        Scanner scan=new Scanner(System.in);
        String id=scan.next();
        DaoFactory.getPatientDaoInstance().deletePatient(id);

        //任意查找操作
        System.out.println("请输入要查找的病人信息:");
        scan=new Scanner(System.in);
        String key=scan.next();
        List<Patient> patientWho=DaoFactory.getPatientDaoInstance().findPatient(key);
        Iterator<Patient> iterator = patientWho.iterator();
        while (iterator.hasNext()) {
            Patient p = iterator.next();
            System.out.println(p.getId() + "  " + p.getName()
                    + "  " + p.getAge()+"  "+p.getDisease()+"  "+p.getPart());
        }

        //按身份证号查找操作
        System.out.println("请输入要查找的病人身份证号:");
        scan=new Scanner(System.in);
        id=scan.next();
        Patient patientId=DaoFactory.getPatientDaoInstance().findPatientById(id);
        System.out.println(patientId.getId() + "  " + patientId.getName()
                + "  " + patientId.getAge()+"  "+patientId.getDisease()+"  "+patientId.getPart());

        //显示病人列表
        System.out.println("所有病人信息如下:");
        List<Patient> patientAll=DaoFactory.getPatientDaoInstance().findAll();
        iterator = patientAll.iterator();
        while (iterator.hasNext()) {
            Patient p = iterator.next();
            System.out.println(p.getId() + "  " + p.getName()
                    + "  " + p.getAge()+"  "+p.getDisease()+"  "+p.getPart());
        }
    }
}



7.
package hospital.vo;

/**
 * @author 定义patient信息
 */
public class Patient {
    private String id;
    private String name;
    private String age;
    private String disease;
    private String part;
    public void setId(String id){
        this.id=id;
    }
    public String getId(){
        return id;
    }
    public void setName(String name){
        this.name=name;
    }
    public String getName(){
        return name;
    }
    public void setAge(String age){
        this.age=age;
    }
    public String getAge(){
        return age;
    }
    public void setDisease(String disease){
        this.disease=disease;
    }
    public String getDisease(){
        return disease;
    }
    public void setPart(String part){
        this.part=part;
    }
    public String getPart(){
        return part;
    }
}
